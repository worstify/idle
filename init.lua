local a=(assert(getgenv,"<OH> ~ Your exploit is not supported"))()if oh then oh.Exit()end local b=true local c="worstify"local d="revision"local e={}local function f(b)for b in pairs(b)do if not a[b]then return false end end return true end local function g(b)for b,c in pairs(b)do if c then a[b]=c end end end if Window and PROTOSMASHER_LOADED then(getgenv()).get_script_function=nil end local h={checkCaller=checkcaller,newCClosure=newcclosure,hookFunction=hookfunction or detour_function;getGc=getgc or get_gc_objects;getInfo=debug.getinfo or getinfo,getSenv=getsenv;getMenv=getmenv or getsenv;getContext=getthreadcontext or get_thread_context or syn and syn.get_thread_identity,getConnections=get_signal_cons or getconnections;getScriptClosure=getscriptclosure or get_script_function,getNamecallMethod=getnamecallmethod or get_namecall_method,getCallingScript=getcallingscript or get_calling_script;getLoadedModules=getloadedmodules or get_loaded_modules,getConstants=debug.getconstants or getconstants or getconsts,getUpvalues=debug.getupvalues or getupvalues or getupvals,getProtos=debug.getprotos or getprotos;getStack=debug.getstack or getstack,getConstant=debug.getconstant or getconstant or getconst,getUpvalue=debug.getupvalue or getupvalue or getupval;getProto=debug.getproto or getproto;getMetatable=getrawmetatable or debug.getmetatable,getHui=get_hidden_gui or gethui,setClipboard=setclipboard or writeclipboard;setConstant=debug.setconstant or setconstant or setconst,setContext=setthreadcontext or set_thread_context or syn and syn.set_thread_identity,setUpvalue=debug.setupvalue or setupvalue or setupval,setStack=debug.setstack or setstack,setReadOnly=setreadonly or make_writeable and function(a,b)if b then make_readonly(a)else make_writeable(a)end end;isLClosure=islclosure or is_l_closure or iscclosure and function(a)return not iscclosure(a)end;isReadOnly=isreadonly or is_readonly;isXClosure=is_synapse_function or issentinelclosure or is_protosmasher_closure or is_sirhurt_closure or iselectronfunction or istempleclosure or checkclosure,hookMetaMethod=hookmetamethod or hookfunction and function(a,b,c)return hookfunction((getMetatable(a))[b],c)end;readFile=readfile,writeFile=writefile,makeFolder=makefolder,isFolder=isfolder,isFile=isfile}if PROTOSMASHER_LOADED then h.getConstant=function(a,b)return(h.getConstants(a))[b]end end local i=h.getUpvalue local j=h.getUpvalues h.getUpvalue=function(a,b)if type(a)=="table"then return i(a.Data,b)end return i(a,b)end h.getUpvalues=function(a)if type(a)=="table"then return j(a.Data)end return j(a)end a.hasMethods=f a.oh={Events={};Hooks={},Cache=e,Methods=h,Constants={Types={["nil"]="rbxassetid://4800232219",table="rbxassetid://4666594276";string="rbxassetid://4666593882",number="rbxassetid://4666593882",boolean="rbxassetid://4666593882",userdata="rbxassetid://4666594723",vector="rbxassetid://4666594723",["function"]="rbxassetid://4666593447";integral="rbxassetid://4666593882"},Syntax={["nil"]=Color3.fromRGB(244,135,113);table=Color3.fromRGB(225,225,225);string=Color3.fromRGB(225,150,85);number=Color3.fromRGB(170,225,127),boolean=Color3.fromRGB(127,200,255);userdata=Color3.fromRGB(225,225,225),vector=Color3.fromRGB(225,225,225),["function"]=Color3.fromRGB(225,225,225),unnamed_function=Color3.fromRGB(175,175,175)}};Exit=function()for a,b in pairs(oh.Events)do b:Disconnect()end for a,b in pairs(oh.Hooks)do local c=type(b)if c=="function"then hookFunction(b,a)elseif c=="table"then hookFunction(b.Closure.Data,b.Original)end end local a=e["rbxassetid://5042109928"]local b=e["rbxassetid://5042114982"]if a then(unpack(a)):Destroy()end if b then(unpack(b)):Destroy()end end}if getConnections then for a,b in pairs(getConnections((game:GetService("ScriptContext")).Error))do local c=getrawmetatable(b)local d=c and c.__index if PROTOSMASHER_LOADED~=nil then setwriteable(c)else setReadOnly(c,false)end if d then c.__index=newcclosure(function(a,b)if b=="Connected"then return true end return d(a,b)end)end if PROTOSMASHER_LOADED~=nil then setReadOnly(c)b:Disconnect()else setReadOnly(c,true)b:Disable()end end end g(h)local k=game:GetService("HttpService")local l=(k:JSONDecode(game:HttpGetAsync("https://api.github.com/repos/"..(c.."/Hydroxide/releases"))))[1]if readFile and writeFile then local f=(isFolder and makeFolder)~=nil local h,i=pcall(readFile,"version.oh")if not h or l.tag_name~=i then if f then local function a(a)if not isFolder(a)then makeFolder(a)end end a("hydroxide")a("hydroxide/user")a("hydroxide/user/"..c)a("hydroxide/user/"..(c.."/methods"))a("hydroxide/user/"..(c.."/modules"))a("hydroxide/user/"..(c.."/objects"))a("hydroxide/user/"..(c.."/ui"))a("hydroxide/user/"..(c.."/ui/controls"))a("hydroxide/user/"..(c.."/ui/modules"))end function a.import(a)if e[a]then return unpack(e[a])end local g if a:find("rbxassetid://")then g={(game:GetObjects(a))[1]}elseif b then if readFile and writeFile then local b=f and"hydroxide/user/"..(c..("/"..(a..".lua")))or"hydroxide-"..(c..("-"..(a:gsub("/","-")..".lua")))local h if isFile and not isFile(b)or not e[a]then h=game:HttpGetAsync("https://raw.githubusercontent.com/"..(c..("/Hydroxide/"..(d..("/"..(a..".lua"))))))writeFile(b,h)else local f,g=pcall(readFile,b)if not f or not e[a]then h=game:HttpGetAsync("https://raw.githubusercontent.com/"..(c..("/Hydroxide/"..(d..("/"..(a..".lua"))))))writeFile(b,h)else h=g end end g={(loadstring(h,a..".lua"))()}else g={(loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/"..(c..("/Hydroxide/"..(d..("/"..(a..".lua")))))),a..".lua"))()}end else g={(loadstring(readFile("hydroxide/"..(a..".lua")),a..".lua"))()}end e[a]=g return unpack(g)end writeFile("version.oh",l.tag_name)elseif h and l.tag_name==i then function a.import(a)if e[a]then return unpack(e[a])end if a:find("rbxassetid://")then assets={(game:GetObjects(a))[1]}elseif b then local b=f and"hydroxide/user/"..(c..("/"..(a..".lua")))or"hydroxide-"..(c..("-"..(a:gsub("/","-")..".lua")))local e,g=pcall(readFile,b)local h if not e then h=game:HttpGetAsync("https://raw.githubusercontent.com/"..(c..("/Hydroxide/"..(d..("/"..(a..".lua"))))))writeFile(b,h)else h=g end assets={(loadstring(h,a..".lua"))()}else assets={(loadstring(readFile("hydroxide/"..(a..".lua")),a..".lua"))()}end e[a]=assets return unpack(assets)end end g({import=a.import})end g(import("methods/string"))g(import("methods/table"))g(import("methods/userdata"))g(import("methods/environment"))