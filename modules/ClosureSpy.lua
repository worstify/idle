local a={}local b={["hookFunction"]=true,["newCClosure"]=true,["isLClosure"]=true,["getProtos"]=true,["getUpvalues"]=true,["getUpvalue"]=true,["getContext"]=true,["setContext"]=true,["setUpvalue"]=true,["getConstants"]=true,["getConstant"]=true,["setConstant"]=true}local c;function log(d,e,...)local f={...}if c and not d:AreArgsIgnored(f)then local g={script=e,args=f}c(d,g)end end;local function h(i)if not c then c=i end end;local j={}local k={}hookCache={}function j.new(l)local d={}local m=l.Data;if getInfo(m).nups<1 then return elseif hookCache[m]then return false end;local n={d,m}hookCache[m]=hookFunction(m,function(...)local f={...}local o=n[1]local p=n[2]if not o.Ignored and not o:AreArgsIgnored(f)then log(o,getCallingScript(),...)end;if not o.Blocked and not o:AreArgsBlocked(f)then return hookCache[p](...)end end)l.Data=hookCache[m]d.Closure=l;d.Calls=0;d.Logs={}d.Ignored=false;d.Blocked=false;d.Ignore=j.ignore;d.Block=j.block;d.IgnoreArg=j.ignoreArg;d.BlockArg=j.blockArg;d.Remove=j.remove;d.Clear=j.clear;d.BlockedArgs={}d.IgnoredArgs={}d.AreArgsBlocked=j.areArgsBlocked;d.AreArgsIgnored=j.areArgsIgnored;d.IncrementCalls=j.incrementCalls;d.DecrementCalls=j.decrementCalls;k[m]=d;return d end;function j.remove(d)k[d.Closure.Data]=nil end;function j.clear(d)d.Calls=0 end;function j.block(d)d.Blocked=not d.Blocked end;function j.ignore(d)d.Ignored=not d.Ignored end;function j.blockArg(d,q,r,s)local t=d.BlockedArgs;local u=t[q]if not u then u={types={},values={}}t[q]=u end;if s then u.types[r]=true else u.values[r]=true end end;function j.ignoreArg(d,q,r,s)local v=d.IgnoredArgs;local w=v[q]if not w then w={types={},values={}}v[q]=w end;if s then w.types[r]=true else w.values[r]=true end end;function j.areArgsBlocked(d,x)local t=d.BlockedArgs;for q,r in pairs(x)do local y=t[q]if y and(y.types[typeof(r)]or y.values[r]~=nil)then return true end end;return false end;function j.areArgsIgnored(d,x)local v=d.IgnoredArgs;for q,r in pairs(x)do local w=v[q]if w and(w.types[typeof(r)]or w.values[r]~=nil)then return true end end;return false end;function j.incrementCalls(d,f)d.Calls=d.Calls+1;table.insert(d.Logs,f)end;function j.decrementCalls(d,f)local z=d.Logs;d.Calls=d.Calls-1;table.remove(z,table.find(z,f))end;a.Hook=j;a.SetEvent=h;a.RequiredMethods=b;return a